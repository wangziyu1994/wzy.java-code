<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:wzy="http://com.wangziyu.springstudy/wzynamespace"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
	                       http://com.wangziyu.springstudy/wzynamespace wzy.xsd
                           http://www.springframework.org/schema/context  spring-context.xsd
                           http://www.springframework.org/schema/aop   spring-aop.xsd"
>


	<aop:config>
		<aop:aspect id="wzyAspect" ref="wzyLogAop">
			<aop:pointcut id="targetMethodPointCut"
						  expression="execution(* com.springsource.aopstudy.WzyTarget.wzytargetMethod(..))"
			/>
			<aop:before method="beforeMonitor" pointcut-ref="targetMethodPointCut"/>
			<aop:after-throwing method="afterThrowMonitor" pointcut-ref="targetMethodPointCut"/>
			<aop:after method="afterMonitor" pointcut-ref="targetMethodPointCut"/>
			<aop:after-returning method="afterReturnMonitor" pointcut-ref="targetMethodPointCut"/>
			<aop:around method="aroundMonitor" pointcut-ref="targetMethodPointCut"/>
			<!--
					1 = {MethodBeforeAdviceInterceptor@2212}
					2 = {AspectJAfterThrowingAdvice@2213} "org.springframework.aop.aspectj.AspectJAfterThrowingAdvice: advice method [public void com.springsource.aopstudy.WzyLogAop.afterThrowMonitor()]; aspect name 'wzyLogAop'"
					3 = {AspectJAfterAdvice@2214} "org.springframework.aop.aspectj.AspectJAfterAdvice: advice method [public void com.springsource.aopstudy.WzyLogAop.afterMonitor()]; aspect name 'wzyLogAop'"
					4 = {AfterReturningAdviceInterceptor@2215}
					5 = {AspectJAroundAdvice@2216} "org.springframework.aop.aspectj.AspectJAroundAdvice: advice method [public void com.springsource.aopstudy.WzyLogAop.aroundMonitor(org.aspectj.lang.ProceedingJoinPoint) throws java.lang.Throwable]; aspect name 'wzyLogAop'"
			-->
			<!--
					我是WzyAspec的before方法
					我是WzyAspec的aroundMonitor之前的方法
					进入WzyTargetMethod方法
					我是WzyAspec的aroundMonitor之后的方法
					我是WzyAspec的afterReturnMonitor方法
					我是WzyAspec的after方法
			-->
					<!--<aop:after-returning method="afterReturnMonitor" pointcut-ref="targetMethodPointCut"/>
						<aop:after method="afterMonitor" pointcut-ref="targetMethodPointCut"/>
						<aop:after-throwing method="afterThrowMonitor" pointcut-ref="targetMethodPointCut"/>
						<aop:around method="aroundMonitor" pointcut-ref="targetMethodPointCut"/>
						<aop:before method="beforeMonitor" pointcut-ref="targetMethodPointCut"/>-->
			<!--
		1 = {AspectJAroundAdvice@2212} "org.springframework.aop.aspectj.AspectJAroundAdvice: advice method [public void com.springsource.aopstudy.WzyLogAop.aroundMonitor(org.aspectj.lang.ProceedingJoinPoint) throws java.lang.Throwable]; aspect name 'wzyLogAop'"
		2 = {MethodBeforeAdviceInterceptor@2213}
		3 = {AspectJAfterThrowingAdvice@2214} "org.springframework.aop.aspectj.AspectJAfterThrowingAdvice: advice method [public void com.springsource.aopstudy.WzyLogAop.afterThrowMonitor()]; aspect name 'wzyLogAop'"
		4 = {AspectJAfterAdvice@2215} "org.springframework.aop.aspectj.AspectJAfterAdvice: advice method [public void com.springsource.aopstudy.WzyLogAop.afterMonitor()]; aspect name 'wzyLogAop'"
		5 = {AfterReturningAdviceInterceptor@2216}
            -->
			<!--
					我是WzyAspec的aroundMonitor之前的方法
					我是WzyAspec的before方法
					进入WzyTargetMethod方法
					我是WzyAspec的afterReturnMonitor方法
					我是WzyAspec的after方法
					我是WzyAspec的aroundMonitor之后的方法
			-->
	</aop:aspect>
</aop:config>

<bean id="wzyTarget" class="com.springsource.aopstudy.WzyTarget">
</bean>

<bean id="wzyLogAop" class="com.springsource.aopstudy.WzyLogAop">
</bean>
</beans>

